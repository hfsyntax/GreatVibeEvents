import { getProduct, listPrices } from "@/lib/stripe"
import Product from "@/components/shop/Product"
import type { Metadata } from "next"
import { getProductVariants, ProductVariant } from "@/actions/server"

export const metadata: Metadata = {
  title: "Great Vibe Events - Product View",
  description: "Generated by create next app",
}

export type ProductPrice = {
  id: string
  name: string
  amount: number | null
}

export default async function ShopId({ params }: { params: { id: string } }) {
  try {
    const product = await getProduct(params.id)
    const plainProduct = {
      images: product.images,
      metadata: product.metadata,
      name: product.name,
      description: product.description,
      created: product.created,
      id: product.id,
    }
    const productPrices = await listPrices({ product: product.id, limit: 100 })
    const plainPrices: Array<ProductPrice> = productPrices.data.map(
      (price) => ({
        id: price.id,
        name: String(price.nickname),
        amount: price.unit_amount,
      }),
    )
    let productVariants: Array<ProductVariant> = []
    if (product.images.length > 0)
      productVariants.push({
        name: product?.metadata?.defaultVariant
          ? product.metadata.defaultVariant
          : "default",
        image_url: product.images[0],
      })
    if (plainProduct.metadata.defaultVariant) {
      const allVariants = await getProductVariants(product.id)
      if (allVariants.length > 0)
        productVariants = productVariants.concat(allVariants)
    }
    return (
      <Product
        item={plainProduct}
        prices={plainPrices}
        variants={productVariants}
      />
    )
  } catch (error: any) {
    console.error(error)
    if (error.type === "StripeInvalidRequestError") {
      return <span className="text-red-500">{error.raw.message}</span>
    } else {
      return <span className="text-red-500">Internal server error</span>
    }
  }
}
