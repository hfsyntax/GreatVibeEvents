import type { Metadata } from "next"
import { getSession } from "@/lib/session"
import FormHandler from "@/components/form/FormHandler"
import { getPaymentIntent, getProduct } from "@/lib/stripe"

export const metadata: Metadata = {
  title: "Great Vibe Events - Form",
  description: "Generated by create next app",
}

export default async function Form({
  searchParams,
}: {
  searchParams: { payment_intent?: string }
}) {
  try {
    const { payment_intent } = searchParams
    if (!payment_intent) {
      return <span className="text-red-500">Invalid form data.</span>
    }

    const paymentIntent = await getPaymentIntent(payment_intent)
    const userId = Number(paymentIntent.metadata.userId)
    const eventId = paymentIntent.metadata.eventId
    const ticketCount = Number(paymentIntent.metadata.ticketCount)
    const formCompleted = paymentIntent.metadata.formCompleted

    if (isNaN(userId) || !eventId || isNaN(ticketCount) || !formCompleted) {
      return <span className="text-red-500">Invalid form data.</span>
    }

    const event = await getProduct(eventId)
    const eventDate = Number(event.metadata.starts)

    if (isNaN(eventDate)) {
      return <span className="text-red-500">Invalid form data.</span>
    }

    const now = Date.now()

    if (now > eventDate) {
      return (
        <span className="text-red-500">
          Form cannot be completed because the event has already started.
        </span>
      )
    }

    const session = await getSession()

    if (userId !== session?.user?.id) {
      return <span className="text-red-500">Invalid form data.</span>
    }

    return (
      <FormHandler
        paymentIntent={payment_intent}
        formCompleted={formCompleted === "true" ? true : false}
      />
    )
  } catch (error: any) {
    console.error(error)
    if (error.type === "StripeInvalidRequestError") {
      return <span className="text-red-500">{error.raw.message}</span>
    } else {
      return <span className="text-red-500">Internal server error</span>
    }
  }
}
