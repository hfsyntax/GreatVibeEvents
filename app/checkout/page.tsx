import type { Metadata } from "next"
import {
  getEventById,
  getEventPayment,
  validLoginCheckoutToken,
} from "@/actions/server"
import { getSession } from "@/lib/session"
import Link from "next/link"
import StripeLoader from "@/components/checkout/StripeLoader"
import { validateRecaptcha } from "@/actions/user"
import { redirect } from "next/navigation"

export const metadata: Metadata = {
  title: "Great Vibe Events - Checkout",
  description: "Generated by create next app",
}

export default async function Checkout({
  searchParams,
}: {
  searchParams: { event_id?: string; token?: string }
}) {
  try {
    if (!searchParams.event_id) {
      return <span className="text-red-500">Invalid event data.</span>
    }

    const event = await getEventById(searchParams.event_id)

    if (!event) {
      return <span className="text-red-500">Event not found.</span>
    }

    const today = new Date()
    const eventDate = new Date(event.date)
    const timeFormatter = new Intl.DateTimeFormat("en-US", {
      hour: "numeric",
      minute: "numeric",
      second: "numeric",
      hour12: false,
    })
    const currentTime = timeFormatter.format(today)

    if (
      today > eventDate ||
      (today === eventDate && currentTime >= event.start_time)
    ) {
      return (
        <span className="text-red-500">
          Event ticket is not available for purchase.
        </span>
      )
    }

    const session = await getSession()

    if (!session) {
      return redirect(
        `/login?redirect=checkout&event_id=${searchParams.event_id}`
      )
    }

    const eventPayment = await getEventPayment(event.id)

    if (!eventPayment?.payment_intent) {
      const token = searchParams.token
      if (token) {
        //const validToken = await validateRecaptcha(token)
        const loginToken = await validLoginCheckoutToken(token)
        //if (validToken || loginToken) {
        return <StripeLoader event={event} />
        // }
      }
      return (
        <span className="text-red-500">
          Unauthenticated, please select the event from the events page.
        </span>
      )
    }

    if (process.env.STRIPE_SECRET_KEY === undefined) {
      throw new Error("Stripe secret key is not defined!")
    }

    if (eventPayment?.form_completed) {
      return (
        <span className="text-green-500">
          You already have a ticket for this event.
        </span>
      )
    }

    return (
      <>
        <span className="text-2xl mr-auto ml-auto">
          You have already have a ticket for this event but still need to
          complete the form.
        </span>
        <Link
          href={`/form?payment_intent=${eventPayment?.payment_intent}`}
          className="bg-black text-white p-3 w-fit mr-auto ml-auto mt-3"
        >
          COMPLETE PARTICIPATION AND RELEASE FORM
        </Link>
      </>
    )
  } catch (error: any) {
    console.error(error)
    if (error.type === "StripeInvalidRequestError") {
      return <span className="text-red-500">{error.raw.message}</span>
    } else {
      return <span className="text-red-500">Internal server error</span>
    }
  }
}
